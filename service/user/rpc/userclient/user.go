// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"zerocmf/service/user/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Menu              = user.Menu
	NewEnforceRequest = user.NewEnforceRequest
	NewEnforcerReply  = user.NewEnforcerReply
	OauthReply        = user.OauthReply
	OauthRequest      = user.OauthRequest
	SiteReply         = user.SiteReply
	SiteReq           = user.SiteReq
	UserReply         = user.UserReply
	UserRequest       = user.UserRequest

	User interface {
		Get(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
		ValidationJwt(ctx context.Context, in *OauthRequest, opts ...grpc.CallOption) (*OauthReply, error)
		NewEnforce(ctx context.Context, in *NewEnforceRequest, opts ...grpc.CallOption) (*NewEnforcerReply, error)
		AutoMigrate(ctx context.Context, in *SiteReq, opts ...grpc.CallOption) (*SiteReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Get(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultUser) ValidationJwt(ctx context.Context, in *OauthRequest, opts ...grpc.CallOption) (*OauthReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ValidationJwt(ctx, in, opts...)
}

func (m *defaultUser) NewEnforce(ctx context.Context, in *NewEnforceRequest, opts ...grpc.CallOption) (*NewEnforcerReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.NewEnforce(ctx, in, opts...)
}

func (m *defaultUser) AutoMigrate(ctx context.Context, in *SiteReq, opts ...grpc.CallOption) (*SiteReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AutoMigrate(ctx, in, opts...)
}
