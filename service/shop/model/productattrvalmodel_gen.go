// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productAttrValFieldNames          = builder.RawFieldNames(&ProductAttrVal{})
	productAttrValRows                = strings.Join(productAttrValFieldNames, ",")
	productAttrValRowsExpectAutoSet   = strings.Join(stringx.Remove(productAttrValFieldNames, "`attr_val_id`", "`id`"), ",")
	productAttrValRowsWithPlaceHolder = strings.Join(stringx.Remove(productAttrValFieldNames, "`attr_val_id`", "`id`"), "=?,") + "=?"

	cacheProductAttrValAttrValIdPrefix      = "cache:productAttrVal:attrValId:"
	cacheProductAttrValAttributeValuePrefix = "cache:productAttrVal:attributeValue:"
)

type (
	productAttrValModel interface {
		Where(query string, args ...interface{}) *defaultProductAttrValModel
		Limit(limit int) *defaultProductAttrValModel
		Offset(offset int) *defaultProductAttrValModel
		OrderBy(query string) *defaultProductAttrValModel
		First(ctx context.Context) (*ProductAttrVal, error)
		Find(ctx context.Context) ([]*ProductAttrVal, error)
		Count(ctx context.Context) (int64, error)
		Insert(ctx context.Context, data *ProductAttrVal) (sql.Result, error)
		FindOne(ctx context.Context, attrValId int64) (*ProductAttrVal, error)
		FindOneByAttributeValue(ctx context.Context, attributeValue string) (*ProductAttrVal, error)
		Update(ctx context.Context, data *ProductAttrVal) error
		Delete(ctx context.Context, attrValId int64) error
	}

	defaultProductAttrValModel struct {
		sqlc.CachedConn
		table     string
		query     string
		queryArgs []interface{}
		limit     int
		offset    int
		orderBy   string
	}

	ProductAttrVal struct {
		AttrValId      int64  `db:"attr_val_id"`
		AttributeValue string `db:"attribute_value"`
		CreatedAt      int64  `db:"created_at"`
		UpdatedAt      int64  `db:"updated_at"`
		DeletedAt      int64  `db:"deleted_at"`
	}
)

func newProductAttrValModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductAttrValModel {
	return &defaultProductAttrValModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_attr_val`",
	}
}

func (m *defaultProductAttrValModel) withSession(session sqlx.Session) *defaultProductAttrValModel {
	return &defaultProductAttrValModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`product_attr_val`",
	}
}

func (m *defaultProductAttrValModel) Where(query string, args ...interface{}) *defaultProductAttrValModel {
	m.query = query
	m.queryArgs = args
	return m
}

func (m *defaultProductAttrValModel) Limit(limit int) *defaultProductAttrValModel {
	m.limit = limit
	return m
}

func (m *defaultProductAttrValModel) Offset(offset int) *defaultProductAttrValModel {
	m.offset = offset
	return m
}

func (m *defaultProductAttrValModel) OrderBy(orderBy string) *defaultProductAttrValModel {
	m.orderBy = orderBy
	return m
}
func (m *defaultProductAttrValModel) Delete(ctx context.Context, attrValId int64) error {
	data, err := m.FindOne(ctx, attrValId)
	if err != nil {
		return err
	}

	productAttrValAttrValIdKey := fmt.Sprintf("%s%v", cacheProductAttrValAttrValIdPrefix, attrValId)
	productAttrValAttributeValueKey := fmt.Sprintf("%s%v", cacheProductAttrValAttributeValuePrefix, data.AttributeValue)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `attr_val_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, attrValId)
	}, productAttrValAttrValIdKey, productAttrValAttributeValueKey)
	return err
}

func (m *defaultProductAttrValModel) FindOne(ctx context.Context, attrValId int64) (*ProductAttrVal, error) {
	productAttrValAttrValIdKey := fmt.Sprintf("%s%v", cacheProductAttrValAttrValIdPrefix, attrValId)
	var resp ProductAttrVal
	err := m.QueryRowCtx(ctx, &resp, productAttrValAttrValIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `attr_val_id` = ? AND deleted_at = 0 limit 1", productAttrValRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, attrValId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductAttrValModel) FindOneByAttributeValue(ctx context.Context, attributeValue string) (*ProductAttrVal, error) {
	productAttrValAttributeValueKey := fmt.Sprintf("%s%v", cacheProductAttrValAttributeValuePrefix, attributeValue)
	var resp ProductAttrVal
	err := m.QueryRowIndexCtx(ctx, &resp, productAttrValAttributeValueKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `attribute_value` = ? AND deleted_at = 0 limit 1", productAttrValRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, attributeValue); err != nil {
			return nil, err
		}
		return resp.AttrValId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductAttrValModel) Insert(ctx context.Context, data *ProductAttrVal) (sql.Result, error) {
	productAttrValAttrValIdKey := fmt.Sprintf("%s%v", cacheProductAttrValAttrValIdPrefix, data.AttrValId)
	productAttrValAttributeValueKey := fmt.Sprintf("%s%v", cacheProductAttrValAttributeValuePrefix, data.AttributeValue)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, productAttrValRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AttributeValue, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	}, productAttrValAttrValIdKey, productAttrValAttributeValueKey)
	return ret, err
}

func (m *defaultProductAttrValModel) Update(ctx context.Context, newData *ProductAttrVal) error {
	data, err := m.FindOne(ctx, newData.AttrValId)
	if err != nil {
		return err
	}

	productAttrValAttrValIdKey := fmt.Sprintf("%s%v", cacheProductAttrValAttrValIdPrefix, data.AttrValId)
	productAttrValAttributeValueKey := fmt.Sprintf("%s%v", cacheProductAttrValAttributeValuePrefix, data.AttributeValue)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `attr_val_id` = ?", m.table, productAttrValRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.AttributeValue, newData.CreatedAt, newData.UpdatedAt, newData.DeletedAt, newData.AttrValId)
	}, productAttrValAttrValIdKey, productAttrValAttributeValueKey)
	return err
}

// 根据条件进行查询一条数据
func (m *defaultProductAttrValModel) First(ctx context.Context) (*ProductAttrVal, error) {
	query := m.query

	queryArgs := m.queryArgs
	orderBy := m.orderBy
	var resp ProductAttrVal
	sql := fmt.Sprintf("select %s from %s", productAttrValRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
		if orderBy != "" {
			sql += fmt.Sprintf(" %s", orderBy)
		}
	}

	sql += " AND deleted_at = 0 limit 1"

	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据条件进行列表查询
func (m *defaultProductAttrValModel) Find(ctx context.Context) ([]*ProductAttrVal, error) {

	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy

	var resp []*ProductAttrVal
	sql := fmt.Sprintf("select %s from %s", productAttrValRows, m.table)

	if query != "" {
		sql += " where " + query + " AND deleted_at = 0"
	} else {
		sql += " where deleted_at = 0"
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
		if orderBy != "" {
			sql += fmt.Sprintf(" %s", orderBy)
		}
	}

	limit := m.limit
	offset := m.offset

	// 查询条件
	if limit > 0 {
		sql += fmt.Sprintf(" LIMIT %d", limit)
	}

	if offset > 0 {
		sql += fmt.Sprintf(" OFFSET %d", offset)
	}

	err := m.QueryRowsNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 统计字段
func (m *defaultProductAttrValModel) Count(ctx context.Context) (int64, error) {
	query := m.query
	queryArgs := m.queryArgs
	sql := fmt.Sprintf("select count(`attr_val_id`) from %s", m.table)
	if query != "" {
		sql += " where " + query
	}
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}
func (m *defaultProductAttrValModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheProductAttrValAttrValIdPrefix, primary)
}

func (m *defaultProductAttrValModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `attr_val_id` = ? AND deleted_at = 0 limit 1", productAttrValRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductAttrValModel) tableName() string {
	return m.table
}
