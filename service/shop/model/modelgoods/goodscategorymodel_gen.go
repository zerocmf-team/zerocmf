// Code generated by goctl. DO NOT EDIT.

package modelgoods

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsCategoryFieldNames          = builder.RawFieldNames(&GoodsCategory{})
	goodsCategoryRows                = strings.Join(goodsCategoryFieldNames, ",")
	goodsCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsCategoryFieldNames, "`id`", "`id`"), ",")
	goodsCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsCategoryFieldNames, "`id`", "`id`"), "=?,") + "=?"

	cacheGoodsCategoryIdPrefix = "cache:goodsCategory:id:"
)

type (
	goodsCategoryModel interface {
		Where(query string, args ...interface{}) *defaultGoodsCategoryModel
		Limit(limit int32) *defaultGoodsCategoryModel
		Offset(offset int32) *defaultGoodsCategoryModel
		OrderBy(query string) *defaultGoodsCategoryModel
		First(ctx context.Context) (*GoodsCategory, error)
		Find(ctx context.Context) ([]*GoodsCategory, error)
		Count(ctx context.Context) (int64, error)
		Insert(ctx context.Context, data *GoodsCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GoodsCategory, error)
		Update(ctx context.Context, data *GoodsCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGoodsCategoryModel struct {
		sqlc.CachedConn
		table     string
		query     string
		queryArgs []interface{}
		limit     int32
		offset    int32
		orderBy   string
	}

	GoodsCategory struct {
		Id        int64          `db:"id"`
		ParentId  sql.NullInt64  `db:"parent_id"`  // 父级id
		Path      sql.NullString `db:"path"`       // 层级path
		Name      sql.NullString `db:"name"`       // 分类名称
		Icon      sql.NullString `db:"icon"`       // 分类图标
		Desc      sql.NullString `db:"desc"`       // 分类描述
		ListOrder float64        `db:"list_order"` // 排序
		Status    int64          `db:"status"`     // 0 => 停用;1 => 启用
		CreatedAt sql.NullInt64  `db:"created_at"`
		UpdatedAt sql.NullInt64  `db:"updated_at"`
		DeletedAt sql.NullInt64  `db:"deleted_at"`
	}
)

func newGoodsCategoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGoodsCategoryModel {
	return &defaultGoodsCategoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`goods_category`",
	}
}

func (m *defaultGoodsCategoryModel) withSession(session sqlx.Session) *defaultGoodsCategoryModel {
	return &defaultGoodsCategoryModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`goods_category`",
	}
}

func (m *defaultGoodsCategoryModel) Where(query string, args ...interface{}) *defaultGoodsCategoryModel {
	m.query = query
	m.queryArgs = args
	return m
}

func (m *defaultGoodsCategoryModel) Limit(limit int32) *defaultGoodsCategoryModel {
	m.limit = limit
	return m
}

func (m *defaultGoodsCategoryModel) Offset(offset int32) *defaultGoodsCategoryModel {
	m.offset = offset
	return m
}

func (m *defaultGoodsCategoryModel) OrderBy(orderBy string) *defaultGoodsCategoryModel {
	m.orderBy = orderBy
	return m
}
func (m *defaultGoodsCategoryModel) Delete(ctx context.Context, id int64) error {
	goodsCategoryIdKey := fmt.Sprintf("%s%v", cacheGoodsCategoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goodsCategoryIdKey)
	return err
}

func (m *defaultGoodsCategoryModel) FindOne(ctx context.Context, id int64) (*GoodsCategory, error) {
	goodsCategoryIdKey := fmt.Sprintf("%s%v", cacheGoodsCategoryIdPrefix, id)
	var resp GoodsCategory
	err := m.QueryRowCtx(ctx, &resp, goodsCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsCategoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsCategoryModel) Insert(ctx context.Context, data *GoodsCategory) (sql.Result, error) {
	goodsCategoryIdKey := fmt.Sprintf("%s%v", cacheGoodsCategoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsCategoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Path, data.Name, data.Icon, data.Desc, data.ListOrder, data.Status, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	}, goodsCategoryIdKey)
	return ret, err
}

func (m *defaultGoodsCategoryModel) Update(ctx context.Context, data *GoodsCategory) error {
	goodsCategoryIdKey := fmt.Sprintf("%s%v", cacheGoodsCategoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsCategoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Path, data.Name, data.Icon, data.Desc, data.ListOrder, data.Status, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Id)
	}, goodsCategoryIdKey)
	return err
}

// 根据条件进行查询一条数据
func (m *defaultGoodsCategoryModel) First(ctx context.Context) (*GoodsCategory, error) {
	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy
	var resp GoodsCategory
	sql := fmt.Sprintf("select %s from %s", goodsCategoryRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
		if orderBy != "" {
			sql += fmt.Sprintf(" %s", orderBy)
		}
	}

	sql += " limit 1"

	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据条件进行列表查询
func (m *defaultGoodsCategoryModel) Find(ctx context.Context) ([]*GoodsCategory, error) {

	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy

	var resp []*GoodsCategory
	sql := fmt.Sprintf("select %s from %s", goodsCategoryRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
		if orderBy != "" {
			sql += fmt.Sprintf(" %s", orderBy)
		}
	}

	limit := m.limit
	offset := m.offset

	// 查询条件
	if limit > 0 {
		sql += fmt.Sprintf(" LIMIT %d", limit)
	}

	if offset > 0 {
		sql += fmt.Sprintf(" OFFSET %d", offset)
	}

	err := m.QueryRowsNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 统计字段
func (m *defaultGoodsCategoryModel) Count(ctx context.Context) (int64, error) {
	query := m.query
	queryArgs := m.queryArgs
	sql := fmt.Sprintf("select count(`id`) from %s", m.table)
	if query != "" {
		sql += " where " + query
	}
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}
func (m *defaultGoodsCategoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoodsCategoryIdPrefix, primary)
}

func (m *defaultGoodsCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsCategoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGoodsCategoryModel) tableName() string {
	return m.table
}
