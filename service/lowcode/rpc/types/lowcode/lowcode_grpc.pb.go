// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: lowcode.proto

package lowcode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lowcode_AutoMigrate_FullMethodName = "/lowcode.lowcode/autoMigrate"
)

// LowcodeClient is the client API for Lowcode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LowcodeClient interface {
	AutoMigrate(ctx context.Context, in *SiteReq, opts ...grpc.CallOption) (*SiteReply, error)
}

type lowcodeClient struct {
	cc grpc.ClientConnInterface
}

func NewLowcodeClient(cc grpc.ClientConnInterface) LowcodeClient {
	return &lowcodeClient{cc}
}

func (c *lowcodeClient) AutoMigrate(ctx context.Context, in *SiteReq, opts ...grpc.CallOption) (*SiteReply, error) {
	out := new(SiteReply)
	err := c.cc.Invoke(ctx, Lowcode_AutoMigrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LowcodeServer is the server API for Lowcode service.
// All implementations must embed UnimplementedLowcodeServer
// for forward compatibility
type LowcodeServer interface {
	AutoMigrate(context.Context, *SiteReq) (*SiteReply, error)
	mustEmbedUnimplementedLowcodeServer()
}

// UnimplementedLowcodeServer must be embedded to have forward compatible implementations.
type UnimplementedLowcodeServer struct {
}

func (UnimplementedLowcodeServer) AutoMigrate(context.Context, *SiteReq) (*SiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoMigrate not implemented")
}
func (UnimplementedLowcodeServer) mustEmbedUnimplementedLowcodeServer() {}

// UnsafeLowcodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LowcodeServer will
// result in compilation errors.
type UnsafeLowcodeServer interface {
	mustEmbedUnimplementedLowcodeServer()
}

func RegisterLowcodeServer(s grpc.ServiceRegistrar, srv LowcodeServer) {
	s.RegisterService(&Lowcode_ServiceDesc, srv)
}

func _Lowcode_AutoMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowcodeServer).AutoMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lowcode_AutoMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowcodeServer).AutoMigrate(ctx, req.(*SiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lowcode_ServiceDesc is the grpc.ServiceDesc for Lowcode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lowcode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lowcode.lowcode",
	HandlerType: (*LowcodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "autoMigrate",
			Handler:    _Lowcode_AutoMigrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lowcode.proto",
}
