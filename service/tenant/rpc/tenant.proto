syntax = "proto3";
package tenant;
option go_package = "./tenant";

message CurrentUserReq {
  string uid = 1;
  int64 siteId = 2;
}

message UserReply {
  int64 id = 1;
  int64 uid = 2;
  int64 siteId = 3;
  int64 oid = 4;
}

message RegisterReq {
  string mobile = 1;
  string userLogin = 2;
  string userPass = 3;
  int64 siteId = 4;
  int64 oid = 5;
}

message CheckUserReq {
  string mobile = 1;
  string userLogin = 2;
  int64 siteId = 3;
}

message CheckUserReply {
  int64 uid = 1;
}

message removeSiteUserReq {
  string mobile = 1;
  int64 siteId = 2;
}

message removeSiteUserReply {

}

message BindMpReq {
  int64 siteId = 1;
  string type = 2;
  string authorizerAppid = 3;
  string AuthorizerAccessToken = 4;
  string AuthorizerRefreshToken = 5;
  string ExpiresIn = 6;
}

message BindMpReply {
  bool status = 1;
  string msg = 2;
}

message siteMpReq {
  int64 siteId = 1;
}

message siteMpData {
  int64 siteId = 1;
  string type = 2;
  string authAppId = 3;
}

message siteMpReply {
  repeated siteMpData data = 1;
}

message showMpData {
  int64 siteId = 1;
  string type = 2;
  string appId = 3;
}

service tenant {
  rpc Get (CurrentUserReq) returns (UserReply) {}
  rpc RegisterUser (RegisterReq) returns (UserReply) {}
  rpc CheckUser (CheckUserReq) returns (CheckUserReply) {}
  rpc removeSiteUser (removeSiteUserReq) returns (removeSiteUserReply) {}
  rpc BindMp (BindMpReq) returns (BindMpReply) {}
  rpc getSiteMp (siteMpReq) returns (siteMpReply) {}
  rpc showMp (showMpData) returns (showMpData) {}
}
