// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productResourcesFieldNames          = builder.RawFieldNames(&ProductResources{})
	productResourcesRows                = strings.Join(productResourcesFieldNames, ",")
	productResourcesRowsExpectAutoSet   = strings.Join(stringx.Remove(productResourcesFieldNames, "`id`", "`id`"), ",")
	productResourcesRowsWithPlaceHolder = strings.Join(stringx.Remove(productResourcesFieldNames, "`id`", "`id`"), "=?,") + "=?"

	cacheProductResourcesIdPrefix = "cache:productResources:id:"
)

type (
	productResourcesModel interface {
		Where(query string, args ...interface{}) *defaultProductResourcesModel
		Limit(limit int) *defaultProductResourcesModel
		Offset(offset int) *defaultProductResourcesModel
		OrderBy(query string) *defaultProductResourcesModel
		First(ctx context.Context) (*ProductResources, error)
		Find(ctx context.Context) ([]*ProductResources, error)
		Count(ctx context.Context) (int64, error)
		Insert(ctx context.Context, data *ProductResources) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductResources, error)
		Update(ctx context.Context, data *ProductResources) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductResourcesModel struct {
		sqlc.CachedConn
		table     string
		query     string
		queryArgs []interface{}
		limit     int
		offset    int
		orderBy   string
	}

	ProductResources struct {
		Id           int64          `db:"id"`
		ProductId    sql.NullInt64  `db:"product_id"`
		ResourceType sql.NullInt64  `db:"resource_type"`
		ResourceUrl  sql.NullString `db:"resource_url"`
		CreatedAt    int64          `db:"created_at"`
		UpdatedAt    int64          `db:"updated_at"`
		DeletedAt    int64          `db:"deleted_at"`
	}
)

func newProductResourcesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductResourcesModel {
	return &defaultProductResourcesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_resources`",
	}
}

func (m *defaultProductResourcesModel) withSession(session sqlx.Session) *defaultProductResourcesModel {
	return &defaultProductResourcesModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`product_resources`",
	}
}

func (m *defaultProductResourcesModel) Where(query string, args ...interface{}) *defaultProductResourcesModel {
	m.query = query
	m.queryArgs = args
	return m
}

func (m *defaultProductResourcesModel) Limit(limit int) *defaultProductResourcesModel {
	m.limit = limit
	return m
}

func (m *defaultProductResourcesModel) Offset(offset int) *defaultProductResourcesModel {
	m.offset = offset
	return m
}

func (m *defaultProductResourcesModel) OrderBy(orderBy string) *defaultProductResourcesModel {
	m.orderBy = orderBy
	return m
}
func (m *defaultProductResourcesModel) Delete(ctx context.Context, id int64) error {
	productResourcesIdKey := fmt.Sprintf("%s%v", cacheProductResourcesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, productResourcesIdKey)
	return err
}

func (m *defaultProductResourcesModel) FindOne(ctx context.Context, id int64) (*ProductResources, error) {
	productResourcesIdKey := fmt.Sprintf("%s%v", cacheProductResourcesIdPrefix, id)
	var resp ProductResources
	err := m.QueryRowCtx(ctx, &resp, productResourcesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", productResourcesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductResourcesModel) Insert(ctx context.Context, data *ProductResources) (sql.Result, error) {
	productResourcesIdKey := fmt.Sprintf("%s%v", cacheProductResourcesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, productResourcesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductId, data.ResourceType, data.ResourceUrl, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	}, productResourcesIdKey)
	return ret, err
}

func (m *defaultProductResourcesModel) Update(ctx context.Context, data *ProductResources) error {
	productResourcesIdKey := fmt.Sprintf("%s%v", cacheProductResourcesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productResourcesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProductId, data.ResourceType, data.ResourceUrl, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Id)
	}, productResourcesIdKey)
	return err
}

// 根据条件进行查询一条数据
func (m *defaultProductResourcesModel) First(ctx context.Context) (*ProductResources, error) {
	query := m.query

	queryArgs := m.queryArgs
	orderBy := m.orderBy
	var resp ProductResources
	sql := fmt.Sprintf("select %s from %s", productResourcesRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
		if orderBy != "" {
			sql += fmt.Sprintf(" %s", orderBy)
		}
	}

	sql += " AND deleted_at = 0 limit 1"

	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据条件进行列表查询
func (m *defaultProductResourcesModel) Find(ctx context.Context) ([]*ProductResources, error) {

	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy

	var resp []*ProductResources
	sql := fmt.Sprintf("select %s from %s", productResourcesRows, m.table)

	if query != "" {
		sql += " where " + query + " AND deleted_at = 0"
	} else {
		sql += " where deleted_at = 0"
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
		if orderBy != "" {
			sql += fmt.Sprintf(" %s", orderBy)
		}
	}

	limit := m.limit
	offset := m.offset

	// 查询条件
	if limit > 0 {
		sql += fmt.Sprintf(" LIMIT %d", limit)
	}

	if offset > 0 {
		sql += fmt.Sprintf(" OFFSET %d", offset)
	}

	err := m.QueryRowsNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 统计字段
func (m *defaultProductResourcesModel) Count(ctx context.Context) (int64, error) {
	query := m.query
	queryArgs := m.queryArgs
	sql := fmt.Sprintf("select count(`id`) from %s", m.table)
	if query != "" {
		sql += " where " + query
	}
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}
func (m *defaultProductResourcesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheProductResourcesIdPrefix, primary)
}

func (m *defaultProductResourcesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", productResourcesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductResourcesModel) tableName() string {
	return m.table
}
