// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productCategoryFieldNames          = builder.RawFieldNames(&ProductCategory{})
	productCategoryRows                = strings.Join(productCategoryFieldNames, ",")
	productCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(productCategoryFieldNames, "`product_category_id`", "`id`"), ",")
	productCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(productCategoryFieldNames, "`product_category_id`", "`id`"), "=?,") + "=?"

	cacheProductCategoryProductCategoryIdPrefix = "cache:productCategory:productCategoryId:"
)

type (
	productCategoryModel interface {
		Where(query string, args ...interface{}) *defaultProductCategoryModel
		Limit(limit int) *defaultProductCategoryModel
		Offset(offset int) *defaultProductCategoryModel
		OrderBy(query string) *defaultProductCategoryModel
		First(ctx context.Context) (*ProductCategory, error)
		Find(ctx context.Context) ([]*ProductCategory, error)
		Count(ctx context.Context) (int64, error)
		Insert(ctx context.Context, data *ProductCategory) (sql.Result, error)
		FindOne(ctx context.Context, productCategoryId int64) (*ProductCategory, error)
		Update(ctx context.Context, data *ProductCategory) error
		Delete(ctx context.Context, productCategoryId int64) error
	}

	defaultProductCategoryModel struct {
		sqlc.CachedConn
		table     string
		query     string
		queryArgs []interface{}
		limit     int
		offset    int
		orderBy   string
	}

	ProductCategory struct {
		ProductCategoryId int64          `db:"product_category_id"`
		ParentId          int64          `db:"parent_id"`  // 父级id
		Path              string         `db:"path"`       // 层级path
		Name              string         `db:"name"`       // 分类名称
		Icon              sql.NullString `db:"icon"`       // 分类图标
		Desc              sql.NullString `db:"desc"`       // 分类描述
		ListOrder         float64        `db:"list_order"` // 排序
		Status            int64          `db:"status"`     // 0 => 停用;1 => 启用
		CreatedAt         int64          `db:"created_at"`
		UpdatedAt         int64          `db:"updated_at"`
		DeletedAt         int64          `db:"deleted_at"`
	}
)

func newProductCategoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductCategoryModel {
	return &defaultProductCategoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_category`",
	}
}

func (m *defaultProductCategoryModel) withSession(session sqlx.Session) *defaultProductCategoryModel {
	return &defaultProductCategoryModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`product_category`",
	}
}

func (m *defaultProductCategoryModel) Where(query string, args ...interface{}) *defaultProductCategoryModel {
	m.query = query
	m.queryArgs = args
	return m
}

func (m *defaultProductCategoryModel) Limit(limit int) *defaultProductCategoryModel {
	m.limit = limit
	return m
}

func (m *defaultProductCategoryModel) Offset(offset int) *defaultProductCategoryModel {
	m.offset = offset
	return m
}

func (m *defaultProductCategoryModel) OrderBy(orderBy string) *defaultProductCategoryModel {
	m.orderBy = orderBy
	return m
}
func (m *defaultProductCategoryModel) Delete(ctx context.Context, productCategoryId int64) error {
	productCategoryProductCategoryIdKey := fmt.Sprintf("%s%v", cacheProductCategoryProductCategoryIdPrefix, productCategoryId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `product_category_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, productCategoryId)
	}, productCategoryProductCategoryIdKey)
	return err
}

func (m *defaultProductCategoryModel) FindOne(ctx context.Context, productCategoryId int64) (*ProductCategory, error) {
	productCategoryProductCategoryIdKey := fmt.Sprintf("%s%v", cacheProductCategoryProductCategoryIdPrefix, productCategoryId)
	var resp ProductCategory
	err := m.QueryRowCtx(ctx, &resp, productCategoryProductCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `product_category_id` = ? AND deleted_at = 0 limit 1", productCategoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, productCategoryId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductCategoryModel) Insert(ctx context.Context, data *ProductCategory) (sql.Result, error) {
	productCategoryProductCategoryIdKey := fmt.Sprintf("%s%v", cacheProductCategoryProductCategoryIdPrefix, data.ProductCategoryId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productCategoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Path, data.Name, data.Icon, data.Desc, data.ListOrder, data.Status, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	}, productCategoryProductCategoryIdKey)
	return ret, err
}

func (m *defaultProductCategoryModel) Update(ctx context.Context, data *ProductCategory) error {
	productCategoryProductCategoryIdKey := fmt.Sprintf("%s%v", cacheProductCategoryProductCategoryIdPrefix, data.ProductCategoryId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `product_category_id` = ?", m.table, productCategoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Path, data.Name, data.Icon, data.Desc, data.ListOrder, data.Status, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.ProductCategoryId)
	}, productCategoryProductCategoryIdKey)
	return err
}

// 根据条件进行查询一条数据
func (m *defaultProductCategoryModel) First(ctx context.Context) (*ProductCategory, error) {
	query := m.query

	queryArgs := m.queryArgs
	orderBy := m.orderBy
	var resp ProductCategory
	sql := fmt.Sprintf("select %s from %s", productCategoryRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	sql += " AND deleted_at = 0 limit 1"

	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据条件进行列表查询
func (m *defaultProductCategoryModel) Find(ctx context.Context) ([]*ProductCategory, error) {

	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy

	var resp []*ProductCategory
	sql := fmt.Sprintf("select %s from %s", productCategoryRows, m.table)

	if query != "" {
		sql += " where " + query + " AND deleted_at = 0"
	} else {
		sql += " where deleted_at = 0"
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	limit := m.limit
	offset := m.offset

	// 查询条件
	if limit > 0 {
		sql += fmt.Sprintf(" LIMIT %d", limit)
	}

	if offset > 0 {
		sql += fmt.Sprintf(" OFFSET %d", offset)
	}

	err := m.QueryRowsNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 统计字段
func (m *defaultProductCategoryModel) Count(ctx context.Context) (int64, error) {
	query := m.query
	queryArgs := m.queryArgs
	sql := fmt.Sprintf("select count(`product_category_id`) from %s", m.table)
	if query != "" {
		sql += " where " + query
	}
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}
func (m *defaultProductCategoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheProductCategoryProductCategoryIdPrefix, primary)
}

func (m *defaultProductCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `product_category_id` = ? AND deleted_at = 0 limit 1", productCategoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductCategoryModel) tableName() string {
	return m.table
}
