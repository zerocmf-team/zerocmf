// Code generated by goctl. DO NOT EDIT.
// Source: shop.proto

package productservice

import (
	"context"

	"zerocmf/service/shop/rpc/pb/shop"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Attributes           = shop.Attributes
	AttributesItem       = shop.AttributesItem
	CategoryDelReq       = shop.CategoryDelReq
	CategoryGetReq       = shop.CategoryGetReq
	CategoryListResp     = shop.CategoryListResp
	CategoryResp         = shop.CategoryResp
	CategorySaveReq      = shop.CategorySaveReq
	CategoryShowReq      = shop.CategoryShowReq
	CategoryTreeData     = shop.CategoryTreeData
	CategoryTreeListResp = shop.CategoryTreeListResp
	CategoryTreeReq      = shop.CategoryTreeReq
	MigrateReply         = shop.MigrateReply
	MigrateReq           = shop.MigrateReq
	ProductAttrKeyReq    = shop.ProductAttrKeyReq
	ProductAttrKeyResp   = shop.ProductAttrKeyResp
	ProductAttrValReq    = shop.ProductAttrValReq
	ProductAttrValResp   = shop.ProductAttrValResp
	ProductGetReq        = shop.ProductGetReq
	ProductListResp      = shop.ProductListResp
	ProductResp          = shop.ProductResp
	ProductSaveReq       = shop.ProductSaveReq
	ProductSaveResp      = shop.ProductSaveResp
	ProductShowReq       = shop.ProductShowReq
	ProductSku           = shop.ProductSku

	ProductService interface {
		ProductGet(ctx context.Context, in *ProductGetReq, opts ...grpc.CallOption) (*ProductListResp, error)
		ProductShow(ctx context.Context, in *ProductShowReq, opts ...grpc.CallOption) (*ProductResp, error)
		ProductSave(ctx context.Context, in *ProductSaveReq, opts ...grpc.CallOption) (*ProductSaveResp, error)
	}

	defaultProductService struct {
		cli zrpc.Client
	}
)

func NewProductService(cli zrpc.Client) ProductService {
	return &defaultProductService{
		cli: cli,
	}
}

func (m *defaultProductService) ProductGet(ctx context.Context, in *ProductGetReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	client := shop.NewProductServiceClient(m.cli.Conn())
	return client.ProductGet(ctx, in, opts...)
}

func (m *defaultProductService) ProductShow(ctx context.Context, in *ProductShowReq, opts ...grpc.CallOption) (*ProductResp, error) {
	client := shop.NewProductServiceClient(m.cli.Conn())
	return client.ProductShow(ctx, in, opts...)
}

func (m *defaultProductService) ProductSave(ctx context.Context, in *ProductSaveReq, opts ...grpc.CallOption) (*ProductSaveResp, error) {
	client := shop.NewProductServiceClient(m.cli.Conn())
	return client.ProductSave(ctx, in, opts...)
}
